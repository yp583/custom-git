#!/bin/bash

# Smart AI Commit Tool
# Makes a naive call to openai for a nice commit message

set -e  # Exit on any error

# Parse command line arguments
EDIT_MODE=false
while [[ $# -gt 0 ]]; do
  case $1 in
    -e|--edit)
      EDIT_MODE=true
      shift
      ;;
    -h|--help)
      echo "Usage: git-mcommit [-e|--edit] [-h|--help]"
      echo "  -e, --edit    Automatically open editor to modify commit message"
      echo "  -h, --help    Show this help message"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      echo "Use -h or --help for usage information"
      exit 1
      ;;
  esac
done

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Try to find the executable in multiple locations
EXECUTABLE=""
if [ -f "$SCRIPT_DIR/build/git_mcommit.o" ]; then
  EXECUTABLE="$SCRIPT_DIR/build/git_mcommit.o"
elif [ -f "$(dirname "$0")/git_mcommit.o" ]; then
  EXECUTABLE="$(dirname "$0")/git_mcommit.o"
elif [ -f "$HOME/bin/git_mcommit.o" ]; then
  EXECUTABLE="$HOME/bin/git_mcommit.o"
fi

# Check if executable exists
if [ -z "$EXECUTABLE" ] || [ ! -f "$EXECUTABLE" ]; then
  echo "Error: git_mcommit.o not found. Please build the project first:"
  echo "Run: ./scripts/setup.sh"
  exit 1
fi

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
  echo "Error: Not in a git repository"
  exit 1
fi

# Check if there are staged changes
if git diff --cached --quiet; then
  echo "No staged changes to commit."
  exit 0
fi

echo "Generating AI commit message..."

# Generate git diff for staged changes and pipe to the AI tool
COMMIT_MESSAGE=$(git diff --cached | "$EXECUTABLE")

# Check if we got a valid commit message
if [ -z "$COMMIT_MESSAGE" ]; then
  echo "Warning: AI commit message generation failed, using fallback"
  COMMIT_MESSAGE="update code"
fi

echo "Proposed commit message:"
echo "$COMMIT_MESSAGE"
echo ""

# Handle editing based on flag or user choice
if [ "$EDIT_MODE" = true ]; then
  # Automatically open editor when -e flag is used
  TEMP_FILE=$(mktemp)
  echo "$COMMIT_MESSAGE" > "$TEMP_FILE"
  
  # Try different editors in order of preference
  if command -v vim >/dev/null 2>&1; then
    vim "$TEMP_FILE"
  elif command -v vi >/dev/null 2>&1; then
    vi "$TEMP_FILE"
  else
    echo "No suitable editor found. Please install vim, or vi."
    rm "$TEMP_FILE"
    exit 1
  fi
  
  # Read the edited message
  COMMIT_MESSAGE=$(cat "$TEMP_FILE")
  rm "$TEMP_FILE"
  
  echo ""
  echo "Final commit message:"
  echo "$COMMIT_MESSAGE"
  echo ""
else
  # Ask for confirmation when no -e flag
  read -p "Confirm this commit message? (Y/n): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Nn]$ ]]; then
    echo "Commit cancelled."
    exit 0
  fi
fi

# Commit with the (possibly edited) message
git commit -m "$COMMIT_MESSAGE"
echo "Created commit with message: $COMMIT_MESSAGE"

echo "Smart commit complete!"